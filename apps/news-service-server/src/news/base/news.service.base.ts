/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  News as PrismaNews,
  Admin as PrismaAdmin,
  Comment as PrismaComment,
} from "@prisma/client";
import { NewsFindManyArgs } from "./NewsFindManyArgs";
import { News } from "./News";

export class NewsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.NewsCountArgs, "select">): Promise<number> {
    return this.prisma.news.count(args);
  }

  async newsItems(args: Prisma.NewsFindManyArgs): Promise<PrismaNews[]> {
    return this.prisma.news.findMany(args);
  }
  async news(args: Prisma.NewsFindUniqueArgs): Promise<PrismaNews | null> {
    return this.prisma.news.findUnique(args);
  }
  async createNews(args: Prisma.NewsCreateArgs): Promise<PrismaNews> {
    return this.prisma.news.create(args);
  }
  async updateNews(args: Prisma.NewsUpdateArgs): Promise<PrismaNews> {
    return this.prisma.news.update(args);
  }
  async deleteNews(args: Prisma.NewsDeleteArgs): Promise<PrismaNews> {
    return this.prisma.news.delete(args);
  }

  async getAdmin(parentId: string): Promise<PrismaAdmin | null> {
    return this.prisma.news
      .findUnique({
        where: { id: parentId },
      })
      .admin();
  }

  async getComment(parentId: string): Promise<PrismaComment | null> {
    return this.prisma.news
      .findUnique({
        where: { id: parentId },
      })
      .comment();
  }
  async ReadNews(args: NewsFindManyArgs): Promise<News[]> {
    throw new Error("Not implemented");
  }
  async ShareNews(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
