/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Visitor } from "./Visitor";
import { VisitorCountArgs } from "./VisitorCountArgs";
import { VisitorFindManyArgs } from "./VisitorFindManyArgs";
import { VisitorFindUniqueArgs } from "./VisitorFindUniqueArgs";
import { CreateVisitorArgs } from "./CreateVisitorArgs";
import { UpdateVisitorArgs } from "./UpdateVisitorArgs";
import { DeleteVisitorArgs } from "./DeleteVisitorArgs";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { VisitorService } from "../visitor.service";
@graphql.Resolver(() => Visitor)
export class VisitorResolverBase {
  constructor(protected readonly service: VisitorService) {}

  async _visitorsMeta(
    @graphql.Args() args: VisitorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Visitor])
  async visitors(
    @graphql.Args() args: VisitorFindManyArgs
  ): Promise<Visitor[]> {
    return this.service.visitors(args);
  }

  @graphql.Query(() => Visitor, { nullable: true })
  async visitor(
    @graphql.Args() args: VisitorFindUniqueArgs
  ): Promise<Visitor | null> {
    const result = await this.service.visitor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Visitor)
  async createVisitor(
    @graphql.Args() args: CreateVisitorArgs
  ): Promise<Visitor> {
    return await this.service.createVisitor({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Visitor)
  async updateVisitor(
    @graphql.Args() args: UpdateVisitorArgs
  ): Promise<Visitor | null> {
    try {
      return await this.service.updateVisitor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Visitor)
  async deleteVisitor(
    @graphql.Args() args: DeleteVisitorArgs
  ): Promise<Visitor | null> {
    try {
      return await this.service.deleteVisitor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Comment], { name: "comments" })
  async findComments(
    @graphql.Parent() parent: Visitor,
    @graphql.Args() args: CommentFindManyArgs
  ): Promise<Comment[]> {
    const results = await this.service.findComments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
