/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Visitor as PrismaVisitor,
  Comment as PrismaComment,
} from "@prisma/client";

export class VisitorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VisitorCountArgs, "select">): Promise<number> {
    return this.prisma.visitor.count(args);
  }

  async visitors(args: Prisma.VisitorFindManyArgs): Promise<PrismaVisitor[]> {
    return this.prisma.visitor.findMany(args);
  }
  async visitor(
    args: Prisma.VisitorFindUniqueArgs
  ): Promise<PrismaVisitor | null> {
    return this.prisma.visitor.findUnique(args);
  }
  async createVisitor(args: Prisma.VisitorCreateArgs): Promise<PrismaVisitor> {
    return this.prisma.visitor.create(args);
  }
  async updateVisitor(args: Prisma.VisitorUpdateArgs): Promise<PrismaVisitor> {
    return this.prisma.visitor.update(args);
  }
  async deleteVisitor(args: Prisma.VisitorDeleteArgs): Promise<PrismaVisitor> {
    return this.prisma.visitor.delete(args);
  }

  async findComments(
    parentId: string,
    args: Prisma.CommentFindManyArgs
  ): Promise<PrismaComment[]> {
    return this.prisma.visitor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comments(args);
  }
}
